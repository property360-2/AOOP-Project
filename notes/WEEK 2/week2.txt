Week 2: Database Setup & Basic Backend Configuration
Day 1: MySQL Database Creation and Setup (DONE)
Objective: Set up the MySQL database and tables required for the application.
Tasks:

Install MySQL and any required database management tools (e.g., phpMyAdmin).(DONE)
Create the database (gym_membership_db).(DONE)
Define and create tables such as User, Membership, Payment, Progress, and Diet based on your ERD.(DONE)
Set appropriate primary keys, foreign keys, and constraints.(DONE)
Populate the tables with some initial dummy data for testing.(DONE)
Deliverable:(DONE)
Functional MySQL database with tables and relationships established.(DONE)
Day 2: PHP Database Connection Setup 
Objective: Write initial PHP scripts to connect to the MySQL database.
Tasks:

Install PHP on your development environment if not already installed.(DONE)
Write a PHP configuration file (db_config.php) for database connection parameters (host, username, password, db name).(DONE)
Create a reusable database connection function in PHP.(DONE)
Test the connection to ensure that the database is accessible.(DONE)
Deliverable:
PHP script that successfully connects to the MySQL database.(DONE)

Day 3: User Registration Logic (Backend Only)
Objective: Develop the PHP backend logic for user registration.
Tasks:

Write a PHP script (register.php) to handle user input from the registration form.(DONE)
Include validations (e.g., email format, password match, unique username/email).(DONE)
Hash passwords securely using password_hash().(DONE)
Insert new users into the User table on successful registration.(DONE)
Handle errors (e.g., duplicate emails) gracefully.(DONE)
Deliverable:(DONE)
Functional backend for user registration, inserting data into the MySQL database.(DONE)
Day 4: User Login Logic (Backend Only)(DONE)
Objective: Implement backend logic for user authentication.(DONE)
Tasks:(DONE)

Create a login script (login.php) to validate credentials.(DONE)
Use password_verify() to check the hashed password against the database.(DONE)
Set session variables on successful login to manage the user state.(DONE)
Handle login errors (e.g., incorrect password or unregistered email).(DONE)
Deliverable:
Functional login backend with proper session management.
Day 5: Create Reusable Components (Header/Footer Templates)
Objective: Build reusable PHP components for easier site management.
Tasks:

Create a header template (header.php) that includes the navigation bar and links.
Create a footer template (footer.php) with copyright info and social media links.
Include these templates across all pages using PHP include() or require().
Deliverable:
Consistent header and footer templates for use across multiple pages.
Day 6: Testing and Debugging
Objective: Ensure the backend functionality is working correctly.
Tasks:

Test user registration and login logic with valid and invalid inputs.
Test session management and ensure users are redirected properly.
Verify that the database connection remains stable.
Debug any errors encountered during testing.
Deliverable:
Fully tested and working backend features.
Day 7: Documentation and Review
Objective: Document the work done so far and review for improvements.
Tasks:

Document the database setup, backend logic, and reusable components.
Create a simple README file to guide others on setting up the project.
Review the code and identify areas for improvement.
Plan tasks for Week 3 (e.g., frontend integration).
Deliverable:
Complete documentation and readiness for Week 3.